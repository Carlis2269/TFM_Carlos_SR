
Starting Unicycler (2025-03-26 12:01:44)
----------------------------------------
    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you provided both short and long reads, Unicycler will perform a hybrid assembly. It will first use SPAdes to make a short-read assembly graph, and then it will use various methods to scaffold that graph with the long reads.
    For more information, please see https://github.com/rrwick/Unicycler

Command: /home/shuri/miniconda3/bin/unicycler -1 /mnt/d/Documentos/Sequences/Illumina/Fastp_trimming/22_S22_trimmed_R1.fastq -2 /mnt/d/Documentos/Sequences/Illumina/Fastp_trimming/22_S22_trimmed_R2.fastq -l /mnt/d/Documentos/Sequences/Nanopore/Fastplong_trimming/22_S22_trimmed.fastq -o /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22 --threads 8

Unicycler version: v0.5.1
Using 8 threads

The output directory already exists:
  /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22

Dependencies:
  Program       Version   Status
  spades.py     4.1.0     good  
  racon         1.5.0     good  
  makeblastdb   2.5.0+    good  
  tblastn       2.5.0+    good  


Choosing k-mer range for assembly (2025-03-26 12:02:04)
-------------------------------------------------------
    Unicycler chooses a k-mer range for SPAdes based on the length of the input reads. It uses a wide range of many k-mer sizes to maximise the chance of finding an ideal assembly.

SPAdes maximum k-mer: 127
Median read length: 151
K-mer range: 27, 53, 71, 87, 99, 111, 119, 127


SPAdes assemblies (2025-03-26 12:02:17)
---------------------------------------
    Unicycler now uses SPAdes to assemble the short reads. It scores the assembly graph for each k-mer using the number of contigs (fewer is better) and the number of dead ends (fewer is better). The score function is 1/(c*(d+2)), where c is the contig count and d is the dead end count.

spades.py -o /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /mnt/d/Documentos/Sequences/Illumina/Fastp_trimming/22_S22_trimmed_R1.fastq -2 /mnt/d/Documentos/Sequences/Illumina/Fastp_trimming/22_S22_trimmed_R2.fastq -m 1024

spades.py -o /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/spades_assembly -k 27,53 --threads 8 --gfa11 --restart-from k27 -m 1024

spades.py -o /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/spades_assembly -k 27,53,71 --threads 8 --gfa11 --restart-from k53 -m 1024

spades.py -o /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/spades_assembly -k 27,53,71,87 --threads 8 --gfa11 --restart-from k71 -m 1024

spades.py -o /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/spades_assembly -k 27,53,71,87,99 --threads 8 --gfa11 --restart-from k87 -m 1024

spades.py -o /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/spades_assembly -k 27,53,71,87,99,111 --threads 8 --gfa11 --restart-from k99 -m 1024

spades.py -o /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/spades_assembly -k 27,53,71,87,99,111,119 --threads 8 --gfa11 --restart-from k111 -m 1024

spades.py -o /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/spades_assembly -k 27,53,71,87,99,111,119,127 --threads 8 --gfa11 --restart-from k119 -m 1024

K-mer   Contigs   Dead ends   Score   
   27         1           0   5.00e-01 <-best
   53         1           0   5.00e-01
   71         1           0   5.00e-01
   87        27          15   2.18e-03
   99        27          15   2.18e-03
  111         1           0   5.00e-01
  119        13           8   7.69e-03
  127         1           0   5.00e-01

Read depth filter: removed 126 contigs totalling 35721 bp
Deleting /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/spades_assembly/


Determining graph multiplicity (2025-03-26 12:24:37)
----------------------------------------------------
    Multiplicity is the number of times a sequence occurs in the underlying sequence. Single-copy contigs (those with a multiplicity of one, occurring only once in the underlying sequence) are particularly useful.

Saving /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/002_depth_filter.gfa


Cleaning graph (2025-03-26 12:24:37)
------------------------------------
    Unicycler now performs various cleaning procedures on the graph to remove overlaps and simplify the graph structure. The end result is a graph ready for bridging.

Graph overlaps removed

Saving /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/003_overlaps_removed.gfa

    Unicycler now selects a set of anchor contigs from the single-copy contigs. These are the contigs which will be connected via bridges to form the final assembly.

1 anchor segments (42,671 bp) out of 1 total segments (42,671 bp)


Creating SPAdes contig bridges (2025-03-26 12:24:38)
----------------------------------------------------
    SPAdes uses paired-end information to perform repeat resolution (RR) and produce contigs from the assembly graph. SPAdes saves the graph paths corresponding to these contigs in the contigs.paths file. When one of these paths contains two or more anchor contigs, Unicycler can create a bridge from the path.

No SPAdes contig bridges


Creating loop unrolling bridges (2025-03-26 12:24:38)
-----------------------------------------------------
    When a SPAdes contig path connects an anchor contig with the middle contig of a simple loop, Unicycler concludes that the sequences are contiguous (i.e. the loop is not a separate piece of DNA). It then uses the read depth of the middle and repeat contigs to guess the number of times to traverse the loop and makes a bridge.

No loop unrolling bridges made
none found


Loading reads (2025-03-26 12:24:38)
-----------------------------------
11,238 / 11,238 (100.0%) - 11,682,395 bp


Assembling contigs and long reads with miniasm (2025-03-26 12:24:39)
--------------------------------------------------------------------
    Unicycler uses miniasm to construct a string graph assembly using both the short read contigs and the long reads. It will then use the resulting string graph to produce bridges between contigs. This method requires decent coverage of long reads and therefore may not be fruitful if long reads are sparse. However, it does not rely on the short read assembly graph having good connectivity and is able to bridge an assembly graph even when it contains many dead ends.
    Unicycler uses two types of "reads" as assembly input: anchor contigs from the short-read assembly and actual long reads which overlap two or more of these contigs. It then assembles them with miniasm.

Aligning long reads to graph using minimap

Saving to /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/miniasm_assembly/01_assembly_reads.fastq:
  0 short-read contigs
  303 long reads

Finding overlaps with minimap... 
success
  52,517 overlaps

Assembling reads with miniasm... 
success
  5 segments, 4 links

Saving /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/miniasm_assembly/11_branching_paths_removed.gfa
Merging segments into unitigs:
  1 linear unitig
  total size = 11,337 bp
Saving /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/miniasm_assembly/12_unitig_graph.gfa

miniasm assembly too small for bridging


Creating simple long read bridges (2025-03-26 12:24:41)
-------------------------------------------------------
    Unicycler uses long read alignments (from minimap) to resolve simple repeat structures in the graph. This takes care of some "low-hanging fruit" of the graph simplification.

Aligning long reads to graph using minimap

    Two-way junctions are defined as cases where two graph contigs (A and B) join together (C) and then split apart again (D and E). This usually represents a simple 2-copy repeat, and there are two possible options for its resolution: (A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a junction gets to "vote" for option 1, option 2 or neither. Unicycler creates a bridge at each junction for the most voted for option.

No suitable two-way junctions present

    Simple loops are parts of the graph where two contigs (A and B) are connected via a repeat (C) which loops back to itself (via D). It is possible to traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times (A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the correct number of times through. In this step, such reads are found and each is aligned against alternative loop counts. A reads casts its "vote" for the loop count it agrees best with, and Unicycler creates a bridge using the most voted for count.

No suitable simple loops present


Determining low score threshold (2025-03-26 12:24:41)
-----------------------------------------------------
    Before conducting semi-global alignment of the long reads to the assembly graph, Unicycler must determine a minimum alignment score threshold such that nonsense alignments are excluded. To choose a threshold automatically, it examines alignments between random sequences and selects a score a few standard deviations above the mean.

Automatically choosing a threshold using random alignment scores.

Random alignment mean score: 61.66
         standard deviation:  1.31
        Low score threshold: 61.66 + (7 x 1.31) = 70.86


Aligning reads (2025-03-26 12:24:42)
------------------------------------
11,238 / 11,238 (100.0%)


Read alignment summary (2025-03-26 12:26:15)
--------------------------------------------
Total read count:            11,238
Fully aligned reads:         11,092
Partially aligned reads:        112
Unaligned reads:                 34
Total bases aligned:     11,520,024 bp
Mean alignment identity:         89.2%

Deleting /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/read_alignment/


Building long read bridges (2025-03-26 12:26:16)
------------------------------------------------
    Unicycler uses the long read alignments to produce bridges between anchor segments. These bridges can be formed using as few as one long read, giving Unicycler the ability to bridge the graph even when long-read depth is low.

     Start -> end  Best path                                 Quality


Applying bridges (2025-03-26 12:26:16)
--------------------------------------
    Unicycler now applies to the graph in decreasing order of quality. This ensures that when multiple, contradictory bridges exist, the most supported option is used.

Bridge type   Start -> end   Path   Quality

Saving /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/004_bridges_applied.gfa


Bridged assembly graph (2025-03-26 12:26:16)
--------------------------------------------
    The assembly is now mostly finished and no more structural changes will be made. Ideally the assembly graph should now have one contig per replicon and no erroneous contigs (i.e. a complete assembly). If there are more contigs, then the assembly is not complete.

Saving /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/005_final_clean.gfa

Component   Segments   Links   Length   N50      Longest segment   Status  
        1          1       1   42,671   42,671            42,671   complete


Rotating completed replicons (2025-03-26 12:26:16)
--------------------------------------------------
    Any completed circular contigs (i.e. single contigs which have one link connecting end to start) can have their start position changed without altering the sequence. For consistency, Unicycler now searches for a starting gene (dnaA or repA) in each such contig, and if one is found, the contig is rotated to start with that gene on the forward strand.

Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage
      1   42,671   1.00x   none found                                             


Assembly complete (2025-03-26 12:26:45)
---------------------------------------
Saving /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/assembly.gfa
Saving /mnt/d/Documentos/Sequences/Hybrid/unicycler_assemblies/22_S22/assembly.fasta

